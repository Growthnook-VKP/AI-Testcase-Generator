[
  {
    "question": "Generate test cases for restaurant owner registration.",
    "chunk": "When the restaurant owner registers on the web-portal by providing user-name and password and address and e-mail address and phone number then the restaurant owner should be able to apply for verification.",
    "test_case": "Verify that the restaurant owner can register successfully by entering all required fields."
  },
  {
    "question": "Generate test cases for login encryption.",
    "chunk": "The messages should be encrypted for log-in communications, so others cannot get user-name and password from those messages.",
    "test_case": "Verify that login communication is encrypted and credentials are not exposed."
  },
  {
    "question": "Generate test cases for failed admin login.",
    "chunk": "If an admin tries to log in to the web portal with a non-existing account then the admin should not be logged in. The admin should be notified about log-in failure.",
    "test_case": "Verify login failure message is shown for invalid admin credentials."
  },
  {
    "question": "Generate test cases for language selection in mobile app.",
    "chunk": "The user should be able to choose what language the mobile application should be set to. The different language choices are Swedish, English, Spanish and French.",
    "test_case": "Verify the app displays UI in selected language after changing it from settings."
  },
  {
    "question": "Tell me test case for email verification before account use.",
    "chunk": "The user should confirm his e-mail before being able to use the system, using a confirmation link sent via email.",
    "test_case": "Verify user cannot log in without confirming email and receives a verification email with confirmation link."
  },
  {
    "question": "Generate test cases for session timeout after inactivity.",
    "chunk": "The system logs the user out automatically after a certain period of inactivity for security purposes.",
    "test_case": "Verify that the system logs out the user after specified inactivity period."
  },
  {
    "question": "Tell me test case for password reset for restaurant owners.",
    "chunk": "If the restaurant owner has forgotten his/her password, they should be able to retrieve it using the Forgot Password functionality.",
    "test_case": "Verify password can be reset using the Forgot Password link and verification process."
  },
  {
    "question": "Generate test cases for admin adding new restaurant types.",
    "chunk": "The administrator can manage restaurant types such as Pizza, Chinese, Indian, etc., via the web portal.",
    "test_case": "Verify that admin can add, edit, and delete restaurant types successfully."
  },
  {
    "question": "Generate test cases for dish image upload by restaurant owner.",
    "chunk": "The restaurant owner should be able to upload pictures for each dish to be displayed in the mobile application.",
    "test_case": "Verify that dish image upload functionality works and image is shown in user view."
  },
  {
    "question": "Tell me test case for search filtering by price and distance.",
    "chunk": "The user should be able to sort restaurants by price or distance from current location in the search result list.",
    "test_case": "Verify sorting by price and distance works correctly in the mobile app."
  }
  
  {
    "question": "Generate test cases for invalid login attempts for users.",
    "chunk": "If a user tries to log in with incorrect credentials, the system should display an error and deny access.",
    "test_case": "Verify error message is displayed and access is denied for incorrect login credentials."
  },
  {
    "question": "Tell me test case for user logout functionality.",
    "chunk": "The user can log out of the system at any time using the logout option.",
    "test_case": "Verify that clicking logout ends the session and redirects to login page."
  },
  {
    "question": "Generate test cases for displaying restaurant list on homepage.",
    "chunk": "The homepage should display a list of available restaurants with brief details such as name, distance, and category.",
    "test_case": "Verify restaurant list with name, distance, and category is displayed on homepage."
  },
  {
    "question": "Tell me test case for map view toggle.",
    "chunk": "The user should be able to toggle between list view and map view when browsing search results.",
    "test_case": "Verify map view toggle displays results correctly on the map when enabled."
  },
  {
    "question": "Generate test cases for mandatory field validation during registration.",
    "chunk": "Fields such as email, name, and password are required during user registration.",
    "test_case": "Verify registration form shows errors when required fields are missing."
  },
  {
    "question": "Generate test cases for admin managing categories.",
    "chunk": "The administrator can create, modify, or delete restaurant categories through the admin panel.",
    "test_case": "Verify that admin can successfully create, edit, and delete restaurant categories."
  },
  {
    "question": "Tell me test case for invalid dish price entry.",
    "chunk": "The system should validate that the price entered for a dish is a positive numeric value.",
    "test_case": "Verify validation error is shown for non-numeric or negative price values."
  },
  {
    "question": "Generate test cases for GPS-based navigation.",
    "chunk": "The mobile application should support GPS integration to locate restaurants and offer directions.",
    "test_case": "Verify GPS integration works and directions to selected restaurant are accurate."
  },
  {
    "question": "Tell me test case for administrator login with valid credentials.",
    "chunk": "An administrator can log in to the portal using their email and password if credentials are correct.",
    "test_case": "Verify admin is successfully logged in when valid credentials are provided."
  },
  {
    "question": "Generate test cases for restaurant profile update.",
    "chunk": "The restaurant owner can update their profile information including address, phone number, and description.",
    "test_case": "Verify that profile updates reflect immediately in the system and are saved correctly."
  },
  {
    "question": "Tell me test case for duplicate email entry during registration.",
    "chunk": "The system should not allow multiple registrations using the same email address.",
    "test_case": "Verify error is shown if user tries to register with an already used email."
  },
  {
    "question": "Generate test cases for menu management by restaurant owner.",
    "chunk": "The restaurant owner can add, edit, or remove dishes from the menu via the web portal.",
    "test_case": "Verify restaurant owner can successfully manage menu items through the portal."
  },
  {
    "question": "Tell me test case for reset password email format.",
    "chunk": "When a user requests to reset the password, a reset link is sent via email with instructions.",
    "test_case": "Verify that password reset email is sent and contains a valid link and instructions."
  },
  {
    "question": "Generate test cases for language default selection.",
    "chunk": "If the user does not select a language, the mobile app defaults to English.",
    "test_case": "Verify the application defaults to English when no language is selected."
  },
  {
    "question": "Tell me test case for user switching views between list and map.",
    "chunk": "The user should be able to switch seamlessly between list and map view without data loss.",
    "test_case": "Verify data consistency and UI response when switching between list and map views."
  },
  {
    "question": "Generate test cases for filtering restaurants by cuisine.",
    "chunk": "Users can filter the displayed restaurants based on cuisine type selected from a list.",
    "test_case": "Verify that only restaurants matching the selected cuisine type are shown."
  },
  {
    "question": "Tell me test case for mobile app loading default location.",
    "chunk": "The mobile application should load the user’s current location as default in the map view.",
    "test_case": "Verify the map view centers around user’s location on initial load."
  },
  {
    "question": "Generate test cases for security lockout after repeated login failures.",
    "chunk": "After five failed login attempts, the account should be temporarily locked for 15 minutes.",
    "test_case": "Verify account lock is enforced after five incorrect login attempts and duration is correct."
  },
  {
    "question": "Tell me test case for user email change.",
    "chunk": "Users can update their email address in the profile settings after verifying the new email.",
    "test_case": "Verify user can update their email only after confirming the new address."
  },
  {
    "question": "Generate test cases for failed restaurant verification request.",
    "chunk": "If a restaurant owner submits incomplete documents, their verification request should be rejected.",
    "test_case": "Verify that verification is denied with a clear message if documents are missing."
  }
]


